<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="#edeae6"
    android:gravity="center_horizontal"
    android:orientation="vertical">


    <android.support.design.widget.AppBarLayout
        android:id="@+id/app_bar"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:background="@drawable/gradient_yellow"
        android:theme="@style/AppTheme.AppBarOverlay">


        <TextView
            android:id="@+id/topic1"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginLeft="8dp"
            android:layout_marginRight="8dp"
            android:layout_marginTop="8dp"
            android:paddingBottom="3dp"
            android:text="@string/videotopic4"
            android:textColor="@android:color/black"
            android:textSize="12pt"
            app:layout_constraintLeft_toLeftOf="parent"
            app:layout_constraintRight_toRightOf="parent"
            app:layout_constraintTop_toTopOf="parent" />

    </android.support.design.widget.AppBarLayout>

    <com.google.android.youtube.player.YouTubePlayerView
        android:id="@+id/youtube_view"
        android:layout_width="match_parent"
        android:layout_height="237dp"
        tools:layout_editor_absoluteX="27dp"
        tools:layout_editor_absoluteY="25dp">

    </com.google.android.youtube.player.YouTubePlayerView>

    <android.support.design.widget.AppBarLayout
        android:id="@+id/app_bar1"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:background="@drawable/gradient_yellow"
        android:theme="@style/AppTheme.AppBarOverlay">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:orientation="horizontal">

            <Button
                android:id="@+id/homeButton"
                android:layout_width="50dp"
                android:layout_height="wrap_content"
                android:layout_gravity="left"
                android:layout_weight="1"
                android:text="Return home" />

            <Button
                android:id="@+id/quizButton"
                android:layout_width="50dp"
                android:layout_height="wrap_content"
                android:layout_gravity="right"
                android:layout_weight="1"
                android:text="Try the Quiz" />


        </LinearLayout>

    </android.support.design.widget.AppBarLayout>

    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical" >

            <TextView
                android:id="@+id/textView3"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:text="in Android, a Fragment is a class which represents a behavior or portion of user interface within an Activity. Fragments were introduced to help produce UI which can adapt to various device orientations as well as function seamlessly across phones and tablets. You can even use multiple fragments within the same activity and rearrange them when the user rotates their device.

Android Studio can generate fragments in a couple flavors: List Fragments which show data items in list or grid form and basic fragments which usually control a single layout. Today we will just be working with a basic fragment.

##3 Generating Fragments With Android Studio

So lets start by becoming familiar with how Android Studio enables us to create new fragments and their layouts on demand.

Creating an Android Component in Android Studio
Creating an Android Component in Android Studio

To begin, right-click in the folder where you want to generate your fragment and select New -> Android Component.

            Creating a new Blank Fragment
            Creating a new Blank Fragment in Android Studio

            Once you have done that, you will see the Android component generator wizard. To proceed select New Blank Fragment. You will see a screen like the one below prompting you to generate a layout XML as well as some basic factory methods and callbacks.

            Naming a fragment in Android Studio
            Naming a fragment in Android Studio

            Next, name your fragment BlankFragment or whatever you want to call it. Leave the check boxes for Create layout XML and the other factory methods checked, more on that later.

            If all goes well, the new fragment as well as its layout file (see below) will be created in your project:

            Example generated fragment in Android Studio
            Example generated fragment in Android Studio

            Opening the fragment_blank.xml layout file, you should see the following:

            Generated fragment layout

            (Just a simple FrameLayout with a TextView stating Hello blank fragment.)

            ##4 Adding an Android Button to our Fragment

            Our fragment is awfully boring now so lets add a button and some interactivity.

            In Android Studio's design perspective, select the fragment_blank.xml file and drag and drop a button into the center portion. Change the text on the button to Wheee! That will add a button with the id button to our BlankFragment.
" />
        </LinearLayout>
    </ScrollView>


</LinearLayout>

